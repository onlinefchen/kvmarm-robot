name: ARM KVM Weekly Analyzer

on:
  schedule:
    - cron: '0 1 * * 1'  # 每周一 UTC 01:00 = 东八区 09:00
  workflow_dispatch:
    inputs:
      days_back:
        description: '分析过去多少天的邮件'
        required: false
        default: '7'
        type: string
      send_notifications:
        description: '是否发送通知'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "arm-kvm-analyzer"
  cancel-in-progress: false

jobs:
  analyze-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🚀 签出代码
      uses: actions/checkout@v4
    
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install markdown>=3.5.0 click>=8.1.7
    
    - name: ⚙️ 配置Git
      run: |
        git config --global user.name "ARM KVM Analyzer Bot"
        git config --global user.email "analyzer@arm-kvm-bot.github.io"
    
    - name: 📧 运行ARM KVM邮件分析
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        AI_PROVIDER: openai
        ENABLE_EMAIL: true
        EMAIL_USER: ${{ secrets.EMAIL_USER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_RECIPIENTS: ${{ vars.EMAIL_RECIPIENTS || secrets.EMAIL_RECIPIENTS }}
        SMTP_SERVER: ${{ vars.SMTP_SERVER || 'smtp.gmail.com' }}
        SMTP_PORT: ${{ vars.SMTP_PORT || '587' }}
        ENABLE_LARK: ${{ vars.ENABLE_LARK || 'false' }}
        LARK_WEBHOOK_URL: ${{ secrets.LARK_WEBHOOK_URL }}
        LARK_WEBHOOK_SECRET: ${{ secrets.LARK_WEBHOOK_SECRET }}
        ENABLE_TELEGRAM: ${{ vars.ENABLE_TELEGRAM || 'false' }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ vars.TELEGRAM_CHAT_ID }}
        DEFAULT_LANGUAGE: zh
        VERIFY_COMPLETENESS: true
        DEBUG: false
        TZ: Asia/Shanghai
      run: |
        sudo timedatectl set-timezone Asia/Shanghai
        DAYS_BACK="${{ github.event.inputs.days_back || '7' }}"
        echo "📅 分析过去 ${DAYS_BACK} 天的邮件"
        END_DATE=$(date +%Y-%m-%d)
        START_DATE=$(date -d "${DAYS_BACK} days ago" +%Y-%m-%d)
        echo "🕒 分析时间范围: ${START_DATE} 到 ${END_DATE}"
        echo "🌏 当前东八区时间: $(TZ=Asia/Shanghai date)"
        ANALYZE_CMD="python analyze.py main --since ${START_DATE} --until ${END_DATE} --output results --language zh --verify-completeness"
        if [ "${{ github.event.inputs.send_notifications }}" = "true" ] || [ "${{ github.event_name }}" = "schedule" ]; then
          ANALYZE_CMD="$ANALYZE_CMD --send-notifications"
          echo "📬 将发送通知到配置的平台"
        fi
        echo "🚀 执行命令: $ANALYZE_CMD"
        $ANALYZE_CMD
    
    - name: 🌐 生成HTML报告和GitHub Pages部署
      run: |
        LATEST_DIR=$(find results -name "20*" -type d | sort | tail -1)
        if [ -z "$LATEST_DIR" ]; then
          echo "❌ 未找到分析结果目录"
          exit 1
        fi
        echo "📁 找到结果目录: $LATEST_DIR"
        mkdir -p docs/reports
        DATE_DIR=$(basename "$LATEST_DIR")
        cp -r "$LATEST_DIR" "docs/reports/$DATE_DIR"
        python html_generator.py --results-dir "$LATEST_DIR" --github-repo "https://onlinefchen.github.io/kvmarm-robot"
        if [ -f "$LATEST_DIR/report.html" ]; then
          cp "$LATEST_DIR/report.html" "docs/reports/$DATE_DIR/index.html"
          echo "✅ HTML报告已复制到GitHub Pages目录"
        fi
    
    - name: 📝 创建GitHub Pages主页
      run: |
        cat > docs/index.html << 'MAIN_PAGE'
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ARM KVM 邮件列表分析报告</title>
    <style>
        body { font-family: 'PingFang SC', 'Microsoft YaHei', sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; }
        .container { max-width: 1000px; margin: 0 auto; background: white; border-radius: 15px; box-shadow: 0 20px 60px rgba(0,0,0,0.1); overflow: hidden; }
        .header { background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%); color: white; padding: 3rem 2rem; text-align: center; }
        .header h1 { font-size: 2.5rem; margin: 0 0 0.5rem 0; font-weight: 300; }
        .content { padding: 2rem; }
        .report-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 1.5rem; margin: 2rem 0; }
        .report-card { border: 1px solid #e0e0e0; border-radius: 12px; padding: 1.5rem; background: #f8f9fa; transition: transform 0.3s ease, box-shadow 0.3s ease; }
        .report-card:hover { transform: translateY(-5px); box-shadow: 0 10px 30px rgba(0,0,0,0.1); }
        .report-card h3 { color: #2c3e50; margin-top: 0; }
        .report-links a { display: inline-block; margin: 0.25rem 0.5rem 0.25rem 0; padding: 0.5rem 1rem; background: #3498db; color: white; text-decoration: none; border-radius: 6px; transition: background 0.3s ease; }
        .report-links a:hover { background: #2980b9; }
        .footer { background: #2c3e50; color: white; padding: 2rem; text-align: center; }
        .stats { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 1.5rem; border-radius: 10px; margin: 1.5rem 0; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>📊 ARM KVM 邮件列表分析报告</h1>
            <p>自动化技术分析 • 每周更新 • AI驱动</p>
        </div>
        <div class="content">
            <div class="stats">
                <h3>📈 系统状态</h3>
                <p>🤖 自动分析ARM KVM邮件列表，每周一东八区上午9点更新</p>
                <p>🔗 <strong>邮件归档</strong>: <a href="https://lore.kernel.org/kvmarm/" style="color: #fff;">lore.kernel.org/kvmarm</a></p>
MAIN_PAGE
        echo "                <p>⏰ <strong>最后更新</strong>: $(TZ=Asia/Shanghai date '+%Y-%m-%d %H:%M:%S %Z')</p>" >> docs/index.html
        cat >> docs/index.html << 'MAIN_PAGE2'
            </div>
            <div class="report-grid" id="reportGrid">
MAIN_PAGE2
        for report_dir in docs/reports/*/; do
          if [ -d "$report_dir" ]; then
            date=$(basename "$report_dir")
            cat >> docs/index.html << REPORT_CARD
                <div class="report-card">
                    <h3>📅 $date</h3>
                    <p>ARM KVM技术动态和开发分析</p>
                    <div class="report-links">
REPORT_CARD
            if [ -f "$report_dir/index.html" ]; then
              echo "                        <a href=\"reports/$date/\">📱 查看报告</a>" >> docs/index.html
            fi
            if [ -f "$report_dir/analysis_report_zh.md" ]; then
              echo "                        <a href=\"reports/$date/analysis_report_zh.md\">📄 Markdown</a>" >> docs/index.html
            fi
            if [ -f "$report_dir/statistics.json" ]; then
              echo "                        <a href=\"reports/$date/statistics.json\">📊 数据</a>" >> docs/index.html
            fi
            echo "                    </div>" >> docs/index.html
            echo "                </div>" >> docs/index.html
          fi
        done
        cat >> docs/index.html << 'MAIN_PAGE_END'
            </div>
        </div>
        <div class="footer">
            <p>🤖 由ARM KVM分析机器人自动生成</p>
            <p>🔗 <a href="https://github.com/onlinefchen/kvmarm-robot" style="color: #3498db;">项目源码</a></p>
        </div>
    </div>
</body>
</html>
MAIN_PAGE_END
        echo "🌐 GitHub Pages结构已准备完成"
    
    - name: 📤 上传分析结果
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: arm-kvm-analysis-${{ github.run_number }}
        path: results/
        retention-days: 30
    
    - name: 🚀 配置GitHub Pages
      uses: actions/configure-pages@v4
    
    - name: 📦 上传到GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'
    
    - name: 🌐 部署到GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: 📬 发送成功通知邮件
      if: success()
      env:
        EMAIL_USER: ${{ secrets.EMAIL_USER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_RECIPIENTS: ${{ vars.EMAIL_RECIPIENTS || secrets.EMAIL_RECIPIENTS }}
        SMTP_SERVER: ${{ vars.SMTP_SERVER || 'smtp.gmail.com' }}
        SMTP_PORT: ${{ vars.SMTP_PORT || '587' }}
      run: |
        if [ -n "$EMAIL_USER" ] && [ -n "$EMAIL_PASSWORD" ] && [ -n "$EMAIL_RECIPIENTS" ]; then
          LATEST_DIR=$(find results -name "20*" -type d | sort | tail -1)
          DATE_STR=$(basename "$LATEST_DIR" 2>/dev/null || date +%Y-%m-%d)
          python3 << 'EMAIL_SCRIPT'
import smtplib
import os
from email.mime.text import MIMEText
from datetime import datetime

smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
smtp_port = int(os.getenv('SMTP_PORT', '587'))
user = os.getenv('EMAIL_USER')
password = os.getenv('EMAIL_PASSWORD')
recipients = [r.strip() for r in os.getenv('EMAIL_RECIPIENTS', '').split(',') if r.strip()]

content = f"""✅ ARM KVM周报生成完成 - {os.getenv('DATE_STR', datetime.now().strftime('%Y-%m-%d'))}

📊 数据分析已完成，详情请查看在线报告

🔗 在线查看: https://onlinefchen.github.io/kvmarm-robot/reports/{os.getenv('DATE_STR', '')}/
🏠 历史报告: https://onlinefchen.github.io/kvmarm-robot
📧 邮件归档: https://lore.kernel.org/kvmarm/

🤖 ARM KVM分析机器人
生成时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} (东八区)
"""

msg = MIMEText(content, 'plain', 'utf-8')
msg['Subject'] = f'✅ ARM KVM周报 - {os.getenv("DATE_STR", datetime.now().strftime("%Y-%m-%d"))}'
msg['From'] = user
msg['To'] = ', '.join(recipients)

try:
    with smtplib.SMTP(smtp_server, smtp_port) as server:
        server.starttls()
        server.login(user, password)
        server.send_message(msg)
    print('✅ 成功通知邮件已发送')
except Exception as e:
    print(f'❌ 邮件发送失败: {e}')
EMAIL_SCRIPT
          export DATE_STR="$DATE_STR"
        else
          echo "⚠️ 邮件配置不完整，跳过邮件通知"
        fi
    
    - name: 💥 发送失败通知
      if: failure()
      env:
        EMAIL_USER: ${{ secrets.EMAIL_USER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_RECIPIENTS: ${{ vars.EMAIL_RECIPIENTS || secrets.EMAIL_RECIPIENTS }}
        GITHUB_RUN_ID: ${{ github.run_id }}
      run: |
        if [ -n "$EMAIL_USER" ] && [ -n "$EMAIL_PASSWORD" ] && [ -n "$EMAIL_RECIPIENTS" ]; then
          python3 << 'FAILURE_EMAIL_SCRIPT'
import smtplib
import os
from email.mime.text import MIMEText
from datetime import datetime

smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
smtp_port = int(os.getenv('SMTP_PORT', '587'))
user = os.getenv('EMAIL_USER')
password = os.getenv('EMAIL_PASSWORD')
recipients = [r.strip() for r in os.getenv('EMAIL_RECIPIENTS', '').split(',') if r.strip()]
run_id = os.getenv('GITHUB_RUN_ID', '')

content = f"""❌ ARM KVM邮件分析失败

📅 时间: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} (东八区)
🔗 查看详情: https://github.com/onlinefchen/kvmarm-robot/actions/runs/{run_id}

请检查GitHub Actions日志排查问题。

---
🤖 ARM KVM分析机器人"""

msg = MIMEText(content, 'plain', 'utf-8')
msg['Subject'] = f'❌ ARM KVM周报生成失败 - {datetime.now().strftime("%Y-%m-%d")}'
msg['From'] = user
msg['To'] = ', '.join(recipients)

try:
    with smtplib.SMTP(smtp_server, smtp_port) as server:
        server.starttls()
        server.login(user, password)
        server.send_message(msg)
    print('📧 失败通知邮件已发送')
except Exception as e:
    print(f'❌ 失败通知发送失败: {e}')
FAILURE_EMAIL_SCRIPT
        else
          echo "⚠️ 邮件配置不完整，跳过失败通知"
        fi