name: ARM KVM Analysis

on:
  schedule:
    - cron: '0 1 * * 1'
  workflow_dispatch:
    inputs:
      days_back:
        description: 'Days to analyze'
        default: '7'
        type: string

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  analysis:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install markdown click
    
    - name: Run analysis
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        EMAIL_USER: ${{ secrets.EMAIL_USER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_RECIPIENTS: ${{ vars.EMAIL_RECIPIENTS }}
      run: |
        DAYS_BACK="${{ github.event.inputs.days_back || '7' }}"
        END_DATE=$(date +%Y-%m-%d)
        START_DATE=$(date -d "${DAYS_BACK} days ago" +%Y-%m-%d)
        echo "Analysis period: ${START_DATE} to ${END_DATE}"
        python analyze.py main --since ${START_DATE} --until ${END_DATE} --output results --language zh --verify-completeness --send-notifications
    
    - name: Generate reports
      run: |
        LATEST_DIR=$(find results -name "20*" -type d | sort | tail -1)
        if [ -n "$LATEST_DIR" ]; then
          python html_generator.py --results-dir "$LATEST_DIR" --github-repo "https://onlinefchen.github.io/kvmarm-robot"
          mkdir -p docs/reports
          DATE_DIR=$(basename "$LATEST_DIR")
          cp -r "$LATEST_DIR" "docs/reports/$DATE_DIR"
          if [ -f "$LATEST_DIR/report.html" ]; then
            cp "$LATEST_DIR/report.html" "docs/reports/$DATE_DIR/index.html"
          fi
        fi
    
    - name: Create simple homepage
      run: |
        mkdir -p docs
        echo '<!DOCTYPE html>' > docs/index.html
        echo '<html><head><title>ARM KVM Reports</title></head>' >> docs/index.html
        echo '<body><h1>ARM KVM Analysis Reports</h1>' >> docs/index.html
        echo '<p>Automated weekly analysis of ARM KVM mailing list</p>' >> docs/index.html
        for report_dir in docs/reports/*/; do
          if [ -d "$report_dir" ]; then
            date=$(basename "$report_dir")
            echo "<p><a href=\"reports/$date/\">Report $date</a></p>" >> docs/index.html
          fi
        done
        echo '</body></html>' >> docs/index.html
    
    - uses: actions/upload-artifact@v4
      if: always()
      with:
        name: analysis-results
        path: results/
        retention-days: 30
    
    - uses: actions/configure-pages@v4
    
    - uses: actions/upload-pages-artifact@v3
      with:
        path: docs
    
    - name: Deploy to Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: Send email notification
      if: success()
      env:
        EMAIL_USER: ${{ secrets.EMAIL_USER }}
        EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        EMAIL_RECIPIENTS: ${{ vars.EMAIL_RECIPIENTS }}
      run: |
        if [ -n "$EMAIL_USER" ] && [ -n "$EMAIL_PASSWORD" ] && [ -n "$EMAIL_RECIPIENTS" ]; then
          LATEST_DIR=$(find results -name "20*" -type d | sort | tail -1)
          DATE_STR=$(basename "$LATEST_DIR" 2>/dev/null || date +%Y-%m-%d)
          export DATE_STR
          python3 -c "
import smtplib, os
from email.mime.text import MIMEText
from datetime import datetime
user = os.getenv('EMAIL_USER')
password = os.getenv('EMAIL_PASSWORD')
recipients = os.getenv('EMAIL_RECIPIENTS', '').split(',')
date_str = os.getenv('DATE_STR', '')
content = f'ARM KVM Weekly Report - {date_str}\n\nAnalysis completed.\n\nView: https://onlinefchen.github.io/kvmarm-robot/reports/{date_str}/\n\nGenerated: {datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")} GMT+8'
msg = MIMEText(content, 'plain', 'utf-8')
msg['Subject'] = f'ARM KVM Report - {date_str}'
msg['From'] = user
msg['To'] = ', '.join([r.strip() for r in recipients if r.strip()])
with smtplib.SMTP('smtp.gmail.com', 587) as server:
    server.starttls()
    server.login(user, password)
    server.send_message(msg)
print('Email sent successfully')
"
        fi