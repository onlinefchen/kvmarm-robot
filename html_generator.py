#!/usr/bin/env python3
"""
HTMLÊä•ÂëäÁîüÊàêÂô®
Âü∫‰∫éMarkdownÊñá‰ª∂ÁîüÊàêÁ≤æÁæéÁöÑHTMLÊä•ÂëäÔºåÈÄÇÂêàGitHub PagesÊâòÁÆ°
"""

import os
import re
import json
from datetime import datetime
from typing import Dict, List, Optional, Any
import markdown
from pathlib import Path


class HTMLReportGenerator:
    """HTMLÊä•ÂëäÁîüÊàêÂô®"""
    
    def __init__(self, github_repo_url: Optional[str] = None):
        self.github_repo_url = github_repo_url or "https://onlinefchen.github.io/kvmarm-robot"
        
    def generate_html_report(self, results_dir: str) -> str:
        """ÁîüÊàêHTMLÊä•Âëä"""
        print(f"üìÑ Ê≠£Âú®ÁîüÊàêHTMLÊä•ÂëäÔºåÁõÆÂΩï: {results_dir}")
        
        # Êü•ÊâæMarkdownÊñá‰ª∂
        markdown_file = self._find_markdown_file(results_dir)
        if not markdown_file:
            print("‚ùå Êú™ÊâæÂà∞MarkdownÊñá‰ª∂")
            return ""
        
        # ËØªÂèñMarkdownÂÜÖÂÆπ
        markdown_content = self._read_markdown_file(markdown_file)
        if not markdown_content:
            print("‚ùå Êó†Ê≥ïËØªÂèñMarkdownÂÜÖÂÆπ")
            return ""
        
        # Âä†ËΩΩÁªüËÆ°Êï∞ÊçÆ
        stats_data = self._load_statistics(results_dir)
        
        # ÁîüÊàêHTML
        html_content = self._generate_html_content(markdown_content, stats_data, results_dir)
        
        # ‰øùÂ≠òHTMLÊñá‰ª∂
        html_file = os.path.join(results_dir, 'report.html')
        with open(html_file, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"‚úÖ HTMLÊä•ÂëäÂ∑≤ÁîüÊàê: {html_file}")
        return html_file
    
    def setup_github_pages(self, base_dir: str = "docs") -> str:
        """ËÆæÁΩÆGitHub PagesÁõÆÂΩïÁªìÊûÑ"""
        print("üöÄ ËÆæÁΩÆGitHub PagesÁõÆÂΩïÁªìÊûÑ...")
        
        # ÂàõÂª∫docsÁõÆÂΩï
        docs_dir = os.path.join(os.getcwd(), base_dir)
        os.makedirs(docs_dir, exist_ok=True)
        
        # ÁîüÊàêindex.html
        index_file = self._generate_index_page(docs_dir)
        
        # ÁîüÊàêGitHub Actions workflow
        self._generate_github_workflow()
        
        # ÁîüÊàê_config.yml
        self._generate_jekyll_config(docs_dir)
        
        print(f"‚úÖ GitHub PagesËÆæÁΩÆÂÆåÊàêÔºåÁõÆÂΩï: {docs_dir}")
        return docs_dir
    
    def deploy_to_pages(self, results_dir: str, docs_dir: str) -> str:
        """ÈÉ®ÁΩ≤Êä•ÂëäÂà∞GitHub Pages"""
        print(f"üöÄ ÈÉ®ÁΩ≤Êä•ÂëäÂà∞GitHub Pages...")
        
        # ÁîüÊàêHTMLÊä•Âëä
        html_file = self.generate_html_report(results_dir)
        if not html_file:
            return ""
        
        # ÂàõÂª∫Êó•ÊúüÁõÆÂΩï
        date_str = datetime.now().strftime('%Y-%m-%d')
        report_dir = os.path.join(docs_dir, 'reports', date_str)
        os.makedirs(report_dir, exist_ok=True)
        
        # Â§çÂà∂Êñá‰ª∂Âà∞docsÁõÆÂΩï
        import shutil
        
        # Â§çÂà∂HTMLÊä•Âëä
        shutil.copy2(html_file, os.path.join(report_dir, 'index.html'))
        
        # Â§çÂà∂ÂÖ∂‰ªñÊñá‰ª∂
        files_to_copy = [
            'analysis_report_zh.md',
            'statistics.json',
            'weekly_report.txt'
        ]
        
        for file_name in files_to_copy:
            src_file = os.path.join(results_dir, file_name)
            if os.path.exists(src_file):
                shutil.copy2(src_file, report_dir)
        
        # Êõ¥Êñ∞indexÈ°µÈù¢
        self._update_index_page(docs_dir, date_str)
        
        # ÁîüÊàêURL
        pages_url = f"{self.github_repo_url}/reports/{date_str}/"
        
        print(f"‚úÖ Êä•ÂëäÂ∑≤ÈÉ®ÁΩ≤Âà∞: {pages_url}")
        return pages_url
    
    def _find_markdown_file(self, results_dir: str) -> Optional[str]:
        """Êü•ÊâæMarkdownÊñá‰ª∂"""
        possible_files = [
            'analysis_report_zh.md',
            'analysis_report_en.md',
            'analysis_report.md'
        ]
        
        for file_name in possible_files:
            file_path = os.path.join(results_dir, file_name)
            if os.path.exists(file_path):
                return file_path
        return None
    
    def _read_markdown_file(self, file_path: str) -> Optional[str]:
        """ËØªÂèñMarkdownÊñá‰ª∂"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return f.read()
        except Exception as e:
            print(f"‚ùå ËØªÂèñMarkdownÊñá‰ª∂Â§±Ë¥•: {e}")
            return None
    
    def _load_statistics(self, results_dir: str) -> Dict[str, Any]:
        """Âä†ËΩΩÁªüËÆ°Êï∞ÊçÆ"""
        stats_file = os.path.join(results_dir, 'statistics.json')
        if os.path.exists(stats_file):
            try:
                with open(stats_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                print(f"‚ö†Ô∏è Âä†ËΩΩÁªüËÆ°Êï∞ÊçÆÂ§±Ë¥•: {e}")
        return {}
    
    def _generate_html_content(self, markdown_content: str, stats_data: Dict[str, Any], results_dir: str) -> str:
        """ÁîüÊàêHTMLÂÜÖÂÆπ"""
        
        # Â∞ÜMarkdownËΩ¨Êç¢‰∏∫HTML
        try:
            html_body = markdown.markdown(
                markdown_content, 
                extensions=['tables', 'codehilite', 'toc']
            )
        except Exception as e:
            print(f"‚ö†Ô∏è MarkdownËΩ¨Êç¢Â§±Ë¥•Ôºå‰ΩøÁî®ÁÆÄÂçïËΩ¨Êç¢: {e}")
            html_body = self._simple_markdown_to_html(markdown_content)
        
        # ÊèêÂèñÁªüËÆ°‰ø°ÊÅØ
        overview = stats_data.get('overview', {})
        total_messages = overview.get('total_messages', 'Unknown')
        total_threads = overview.get('total_threads', 'Unknown')
        contributors = overview.get('unique_contributors', 'Unknown')
        date_range = overview.get('date_range', ['Unknown', 'Unknown'])
        
        # ÁîüÊàêGitHub Pages URL
        date_str = datetime.now().strftime('%Y-%m-%d')
        pages_url = f"{self.github_repo_url}/reports/{date_str}/"
        
        # CSSÊ†∑Âºè
        css = """
        <style>
        :root {
            --primary-color: #2c3e50;
            --secondary-color: #3498db;
            --accent-color: #e74c3c;
            --background-color: #f8f9fa;
            --card-background: #ffffff;
            --text-color: #2c3e50;
            --text-light: #7f8c8d;
            --border-color: #ecf0f1;
            --success-color: #27ae60;
            --warning-color: #f39c12;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: var(--text-color);
            background: var(--background-color);
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 3rem 2rem;
            text-align: center;
            border-radius: 15px;
            margin-bottom: 2rem;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
        
        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
            font-weight: 300;
        }
        
        .header .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
            margin-bottom: 1rem;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0;
        }
        
        .stat-card {
            background: var(--card-background);
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            text-align: center;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0,0,0,0.15);
        }
        
        .stat-number {
            font-size: 3rem;
            font-weight: bold;
            color: var(--secondary-color);
            margin-bottom: 0.5rem;
        }
        
        .stat-label {
            font-size: 1.1rem;
            color: var(--text-light);
            text-transform: uppercase;
            letter-spacing: 1px;
        }
        
        .content-card {
            background: var(--card-background);
            border-radius: 15px;
            padding: 2.5rem;
            margin: 2rem 0;
            box-shadow: 0 5px 20px rgba(0,0,0,0.08);
        }
        
        .content-card h1 {
            color: var(--primary-color);
            border-bottom: 3px solid var(--secondary-color);
            padding-bottom: 0.5rem;
            margin-bottom: 1.5rem;
        }
        
        .content-card h2 {
            color: var(--secondary-color);
            margin: 2rem 0 1rem 0;
            position: relative;
        }
        
        .content-card h2::before {
            content: '';
            position: absolute;
            left: -1rem;
            top: 50%;
            transform: translateY(-50%);
            width: 4px;
            height: 100%;
            background: var(--secondary-color);
            border-radius: 2px;
        }
        
        .content-card h3 {
            color: var(--primary-color);
            margin: 1.5rem 0 1rem 0;
        }
        
        .content-card ul {
            margin: 1rem 0;
            padding-left: 1.5rem;
        }
        
        .content-card li {
            margin: 0.5rem 0;
            position: relative;
        }
        
        .content-card li::marker {
            color: var(--secondary-color);
        }
        
        .content-card strong {
            color: var(--primary-color);
        }
        
        .footer {
            background: var(--primary-color);
            color: white;
            padding: 2rem;
            text-align: center;
            border-radius: 12px;
            margin-top: 3rem;
        }
        
        .footer a {
            color: #3498db;
            text-decoration: none;
        }
        
        .footer a:hover {
            text-decoration: underline;
        }
        
        .github-link {
            background: var(--secondary-color);
            color: white;
            padding: 1rem 2rem;
            border-radius: 8px;
            text-decoration: none;
            display: inline-block;
            margin: 1rem;
            transition: background 0.3s ease;
        }
        
        .github-link:hover {
            background: #2980b9;
            color: white;
            text-decoration: none;
        }
        
        .navigation {
            background: var(--card-background);
            padding: 1rem 2rem;
            border-radius: 12px;
            margin-bottom: 2rem;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }
        
        .navigation a {
            color: var(--secondary-color);
            text-decoration: none;
            margin: 0 1rem;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            transition: background 0.3s ease;
        }
        
        .navigation a:hover {
            background: var(--background-color);
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .header {
                padding: 2rem 1rem;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .content-card {
                padding: 1.5rem;
            }
            
            .stats-grid {
                grid-template-columns: 1fr;
            }
        }
        
        .highlight {
            background: linear-gradient(135deg, #ffeaa7 0%, #fab1a0 100%);
            padding: 1.5rem;
            border-radius: 10px;
            margin: 1.5rem 0;
            border-left: 5px solid var(--warning-color);
        }
        
        .info-box {
            background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
            color: white;
            padding: 1.5rem;
            border-radius: 10px;
            margin: 1.5rem 0;
        }
        
        .info-box a {
            color: #ddd;
        }
        </style>
        """
        
        # ÂÆåÊï¥HTML
        html = f"""<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="ARM KVMÈÇÆ‰ª∂ÂàóË°®Ëá™Âä®ÂàÜÊûêÊä•Âëä">
    <meta name="author" content="ARM KVM Analysis System">
    <title>ARM KVM ÈÇÆ‰ª∂ÂàóË°®ÂàÜÊûêÊä•Âëä</title>
    {css}
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä ARM KVM ÈÇÆ‰ª∂ÂàóË°®ÂàÜÊûêÊä•Âëä</h1>
            <div class="subtitle">
                {date_range[0][:10]} Ëá≥ {date_range[1][:10]}
            </div>
            <div class="subtitle">
                ü§ñ Áî± ARM KVM ÂàÜÊûêÁ≥ªÁªüËá™Âä®ÁîüÊàê
            </div>
        </div>
        
        <div class="navigation">
            <a href="{self.github_repo_url}">üè† È¶ñÈ°µ</a>
            <a href="{pages_url}analysis_report_zh.md">üìÑ MarkdownÁâàÊú¨</a>
            <a href="{pages_url}statistics.json">üìä ÂéüÂßãÊï∞ÊçÆ</a>
            <a href="https://lore.kernel.org/kvmarm/">üìß ÈÇÆ‰ª∂ÂΩíÊ°£</a>
        </div>
        
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number">{total_messages}</div>
                <div class="stat-label">Â∞ÅÈÇÆ‰ª∂</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{total_threads}</div>
                <div class="stat-label">‰∏™Á∫øÁ®ã</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{contributors}</div>
                <div class="stat-label">‰ΩçË¥°ÁåÆËÄÖ</div>
            </div>
        </div>
        
        <div class="highlight">
            <strong>üìå Êä•Âëä‰∫ÆÁÇπ</strong>: Êú¨Êä•ÂëäÂåÖÂê´ARM KVMÈÇÆ‰ª∂ÂàóË°®ÁöÑÂÆåÊï¥ÊäÄÊúØÂàÜÊûêÔºå
            Ê∂µÁõñ‰∫ÜÊâÄÊúâÈáçË¶ÅÁöÑÂºÄÂèëÂä®ÊÄÅÂíåÊäÄÊúØËÆ®ËÆ∫„ÄÇÈÄöËøáGitHub PagesËá™Âä®ÊâòÁÆ°ÔºåÁ°Æ‰øùÂÜÖÂÆπÁöÑÂèØËÆøÈóÆÊÄß„ÄÇ
        </div>
        
        <div class="content-card">
            {html_body}
        </div>
        
        <div class="info-box">
            <h3>üîó Áõ∏ÂÖ≥ËµÑÊ∫ê</h3>
            <p>
                <a href="https://lore.kernel.org/kvmarm/" target="_blank">ARM KVMÈÇÆ‰ª∂ÂΩíÊ°£</a> | 
                <a href="https://www.kernel.org/" target="_blank">LinuxÂÜÖÊ†∏‰∏ªÈ°µ</a> | 
                <a href="https://developer.arm.com/" target="_blank">ARMÂºÄÂèëËÄÖËµÑÊ∫ê</a>
            </p>
        </div>
        
        <div class="footer">
            <div>
                <a href="{pages_url}" class="github-link">
                    üìÑ Êü•ÁúãÊ≠§Êä•ÂëäÁöÑGitHub Pages
                </a>
                <a href="{self.github_repo_url}" class="github-link">
                    üè† ËøîÂõûÊä•ÂëäÈ¶ñÈ°µ
                </a>
            </div>
            <p style="margin-top: 1rem;">
                ü§ñ Áî± ARM KVM ÂàÜÊûêÁ≥ªÁªüËá™Âä®ÁîüÊàê | 
                üìÖ ÁîüÊàêÊó∂Èó¥: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} |
                üîó <a href="{pages_url}">Ê∞∏‰πÖÈìæÊé•</a>
            </p>
        </div>
    </div>
</body>
</html>"""
        
        return html
    
    def _simple_markdown_to_html(self, markdown_content: str) -> str:
        """ÁÆÄÂçïÁöÑMarkdownÂà∞HTMLËΩ¨Êç¢"""
        html = markdown_content
        
        # Ê†áÈ¢òËΩ¨Êç¢
        html = re.sub(r'^# (.+)$', r'<h1>\1</h1>', html, flags=re.MULTILINE)
        html = re.sub(r'^## (.+)$', r'<h2>\1</h2>', html, flags=re.MULTILINE)
        html = re.sub(r'^### (.+)$', r'<h3>\1</h3>', html, flags=re.MULTILINE)
        
        # Á≤ó‰ΩìËΩ¨Êç¢
        html = re.sub(r'\*\*(.+?)\*\*', r'<strong>\1</strong>', html)
        
        # ÂàóË°®ËΩ¨Êç¢
        lines = html.split('\n')
        in_list = False
        result_lines = []
        
        for line in lines:
            if line.strip().startswith('- '):
                if not in_list:
                    result_lines.append('<ul>')
                    in_list = True
                result_lines.append(f'<li>{line.strip()[2:]}</li>')
            else:
                if in_list:
                    result_lines.append('</ul>')
                    in_list = False
                result_lines.append(line)
        
        if in_list:
            result_lines.append('</ul>')
        
        # ÊÆµËêΩËΩ¨Êç¢
        html = '\n'.join(result_lines)
        html = re.sub(r'\n\n', '</p><p>', html)
        html = f'<p>{html}</p>'
        html = html.replace('<p></p>', '')
        
        return html
    
    def _generate_index_page(self, docs_dir: str) -> str:
        """ÁîüÊàêindexÈ°µÈù¢"""
        index_content = f"""<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ARM KVM ÈÇÆ‰ª∂ÂàóË°®ÂàÜÊûêÊä•Âëä</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }}
        
        .container {{
            max-width: 1000px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.1);
            overflow: hidden;
        }}
        
        .header {{
            background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            color: white;
            padding: 3rem 2rem;
            text-align: center;
        }}
        
        .header h1 {{
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
            font-weight: 300;
        }}
        
        .content {{
            padding: 2rem;
        }}
        
        .report-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
            margin: 2rem 0;
        }}
        
        .report-card {{
            border: 1px solid #e0e0e0;
            border-radius: 12px;
            padding: 1.5rem;
            background: #f8f9fa;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }}
        
        .report-card:hover {{
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }}
        
        .report-card h3 {{
            color: #2c3e50;
            margin-top: 0;
        }}
        
        .report-links {{
            margin-top: 1rem;
        }}
        
        .report-links a {{
            display: inline-block;
            margin: 0.25rem 0.5rem 0.25rem 0;
            padding: 0.5rem 1rem;
            background: #3498db;
            color: white;
            text-decoration: none;
            border-radius: 6px;
            transition: background 0.3s ease;
        }}
        
        .report-links a:hover {{
            background: #2980b9;
        }}
        
        .footer {{
            background: #2c3e50;
            color: white;
            padding: 2rem;
            text-align: center;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä ARM KVM ÈÇÆ‰ª∂ÂàóË°®ÂàÜÊûêÊä•Âëä</h1>
            <p>Ëá™Âä®ÁîüÊàêÁöÑÊäÄÊúØÂàÜÊûêÂíåÂºÄÂèëÂä®ÊÄÅÊä•Âëä</p>
        </div>
        
        <div class="content">
            <div class="report-grid" id="reportGrid">
                <!-- Êä•ÂëäÂ∞ÜÂä®ÊÄÅÊ∑ªÂä†Âà∞ËøôÈáå -->
            </div>
            
            <div style="text-align: center; margin: 2rem 0; padding: 2rem; background: #e8f4f8; border-radius: 12px;">
                <h3>üìö Áõ∏ÂÖ≥ËµÑÊ∫ê</h3>
                <p>
                    <a href="https://lore.kernel.org/kvmarm/" style="margin: 0 1rem; color: #2980b9;">ARM KVMÈÇÆ‰ª∂ÂΩíÊ°£</a>
                    <a href="https://www.kernel.org/" style="margin: 0 1rem; color: #2980b9;">LinuxÂÜÖÊ†∏‰∏ªÈ°µ</a>
                    <a href="https://developer.arm.com/" style="margin: 0 1rem; color: #2980b9;">ARMÂºÄÂèëËÄÖËµÑÊ∫ê</a>
                </p>
            </div>
        </div>
        
        <div class="footer">
            <p>ü§ñ Áî± ARM KVM ÂàÜÊûêÁ≥ªÁªüËá™Âä®ÁîüÊàêÂíåÊõ¥Êñ∞</p>
            <p>üìÖ ÊúÄÂêéÊõ¥Êñ∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </div>
    </div>
    
    <script>
        // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†JavaScriptÊù•Âä®ÊÄÅÂä†ËΩΩÊä•ÂëäÂàóË°®
        console.log('ARM KVM Analysis Reports loaded');
    </script>
</body>
</html>"""
        
        index_file = os.path.join(docs_dir, 'index.html')
        with open(index_file, 'w', encoding='utf-8') as f:
            f.write(index_content)
        
        return index_file
    
    def _update_index_page(self, docs_dir: str, date_str: str):
        """Êõ¥Êñ∞indexÈ°µÈù¢ÔºåÊ∑ªÂä†Êñ∞Êä•Âëä"""
        # ËøôÈáåÂèØ‰ª•ÂÆûÁé∞Âä®ÊÄÅÊõ¥Êñ∞indexÈ°µÈù¢ÁöÑÈÄªËæë
        # ÁõÆÂâçÁÆÄÂçïÈáçÊñ∞ÁîüÊàê
        self._generate_index_page(docs_dir)
        print(f"‚úÖ Â∑≤Êõ¥Êñ∞indexÈ°µÈù¢ÔºåÊ∑ªÂä†‰∫Ü {date_str} ÁöÑÊä•Âëä")
    
    def _generate_github_workflow(self):
        """ÁîüÊàêGitHub ActionsÂ∑•‰ΩúÊµÅ"""
        workflow_dir = os.path.join('.github', 'workflows')
        os.makedirs(workflow_dir, exist_ok=True)
        
        workflow_content = """name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  schedule:
    # ÊØèÂë®‰∏ÄÊó©‰∏ä9ÁÇπ (UTC) ËøêË°å
    - cron: '0 9 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run analysis and generate reports
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        python analyze.py main --output docs/reports/$(date +%Y-%m-%d)
        
    - name: Generate HTML reports
      run: |
        python html_generator.py --deploy
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './docs'
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
"""
        
        workflow_file = os.path.join(workflow_dir, 'deploy.yml')
        with open(workflow_file, 'w', encoding='utf-8') as f:
            f.write(workflow_content)
        
        print(f"‚úÖ GitHub ActionsÂ∑•‰ΩúÊµÅÂ∑≤ÁîüÊàê: {workflow_file}")
    
    def _generate_jekyll_config(self, docs_dir: str):
        """ÁîüÊàêJekyllÈÖçÁΩÆ"""
        config_content = """title: ARM KVM ÈÇÆ‰ª∂ÂàóË°®ÂàÜÊûêÊä•Âëä
description: Ëá™Âä®ÁîüÊàêÁöÑARM KVMÈÇÆ‰ª∂ÂàóË°®ÊäÄÊúØÂàÜÊûêÊä•Âëä
baseurl: ""
url: "https://your-username.github.io"

markdown: kramdown
highlighter: rouge
theme: minima

plugins:
  - jekyll-feed
  - jekyll-sitemap

exclude:
  - Gemfile
  - Gemfile.lock
  - node_modules
  - vendor

collections:
  reports:
    output: true
    permalink: /:collection/:name/

defaults:
  - scope:
      path: ""
      type: "reports"
    values:
      layout: "report"
"""
        
        config_file = os.path.join(docs_dir, '_config.yml')
        with open(config_file, 'w', encoding='utf-8') as f:
            f.write(config_content)
        
        print(f"‚úÖ JekyllÈÖçÁΩÆÂ∑≤ÁîüÊàê: {config_file}")


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='ÁîüÊàêHTMLÊä•ÂëäÂíåËÆæÁΩÆGitHub Pages')
    parser.add_argument('--results-dir', default='test_notification_results/2025-07-06', help='ÁªìÊûúÁõÆÂΩï')
    parser.add_argument('--github-repo', default='https://onlinefchen.github.io/kvmarm-robot', help='GitHub Pages URL')
    parser.add_argument('--setup-pages', action='store_true', help='ËÆæÁΩÆGitHub Pages')
    parser.add_argument('--deploy', action='store_true', help='ÈÉ®ÁΩ≤Âà∞GitHub Pages')
    
    args = parser.parse_args()
    
    generator = HTMLReportGenerator(args.github_repo)
    
    if args.setup_pages:
        docs_dir = generator.setup_github_pages()
        print(f"üìö GitHub PagesËÆæÁΩÆÂÆåÊàêÔºåËØ∑Êèê‰∫§Âπ∂Êé®ÈÄÅÂà∞GitHub")
    
    if args.deploy:
        docs_dir = 'docs'
        os.makedirs(docs_dir, exist_ok=True)
        pages_url = generator.deploy_to_pages(args.results_dir, docs_dir)
        print(f"üöÄ Êä•ÂëäÂ∑≤ÈÉ®ÁΩ≤ÔºåURL: {pages_url}")
    else:
        html_file = generator.generate_html_report(args.results_dir)
        print(f"üìÑ HTMLÊä•ÂëäÂ∑≤ÁîüÊàê: {html_file}")